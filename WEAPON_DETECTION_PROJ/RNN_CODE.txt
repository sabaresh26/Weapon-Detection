import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.optimizers import Adam

# Define data paths
train_data_dir = "C:/NewML/MachineLearning/env/archive/weapon_detection/train/images"
validation_data_dir = "C:/NewML/MachineLearning/env/archive/weapon_detection/val/images"
test_data_dir = "C:/NewML/MachineLearning/env/archive/test/test"  # Update this path for the test data

# Data preprocessing
datagen = ImageDataGenerator(rescale=1./255, rotation_range=20, width_shift_range=0.2, height_shift_range=0.2, shear_range=0.2, zoom_range=0.2, horizontal_flip=True, fill_mode='nearest')

# Define image dimensions
image_height = 128  # Set the height of each image
image_width = 128  # Set the width of each image
channels = 3  # Number of color channels (e.g., 3 for RGB)

# Model architecture
model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(image_height, image_width, channels), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.0001), metrics=['accuracy'])

# Load and preprocess data
batch_size = 20  # Set the batch size
epochs = 10  # Set the number of epochs
total_train = 1000  # Set the total number of training samples
total_validation = 200  # Set the total number of validation samples

train_generator = datagen.flow_from_directory(train_data_dir, target_size=(image_height, image_width), batch_size=batch_size, class_mode='binary')
validation_generator = datagen.flow_from_directory(validation_data_dir, target_size=(image_height, image_width), batch_size=batch_size, class_mode='binary')
test_generator = datagen.flow_from_directory(test_data_dir, target_size=(image_height, image_width), batch_size=batch_size, class_mode='binary')

# Train the model
model.fit(train_generator, steps_per_epoch=total_train // batch_size, epochs=epochs, validation_data=validation_generator, validation_steps=total_validation // batch_size)

# Evaluate the model on the test data

# ... (previous code)

# Evaluate the model on the test data
test_evaluation = model.evaluate(test_generator)

# Calculate accuracy as a percentage
test_accuracy = test_evaluation[1] * 100

# Print the test accuracy as a percentage
print(f"Test Accuracy: {test_accuracy:.2f}%")

# Save the trained model
model.save('weapon_detection_model.h5')